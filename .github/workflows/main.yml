name: default

on:
  push:
    branches:
      - feature/*
      - bugfix/*
      - release/*
      - hotfix/*
      - develop
      - main

concurrency:
  group: ci-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      graphnode-postgres:
        image: postgres:16.8
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: graphnode
          POSTGRES_PASSWORD: password
          POSTGRES_DB: graphnode-db
          POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
        options: >-
              --health-cmd "pg_isready -U graphnode -d graphnode-db"
              --health-interval 10s
              --health-timeout 5s
              --health-retries 3
              -- postgres
              -cshared_preload_libraries=pg_stat_statements
      
      ipfs:
        image: ipfs/kubo:v0.34.1
        ports:
          - 8080:8080
          - 5001:5001

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Format
        run: npm run check-format
        
      - name: Build
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Prepare local stack env
        id: prepare
        run: npx tsx test/scripts/prepare-test-env.ts

      - name: Fetch genesis block number
        id: fetch_block
        run: |
          BLOCK_NUMBER=$(cat /test-stack/FORK_BLOCK)
          FORK_URL=$(cat /test-stack/FORK_URL)
          echo "BLOCK=$BLOCK_NUMBER" >> $GITHUB_OUTPUT
          echo "URL=$FORK_URL" >> $GITHUB_OUTPUT

      - name: Start Anvil
        uses: iExecBlockchainComputing/anvil-github-action@main
        with:
          fork-url: ${{ steps.fetch_block.outputs.URL }}
          fork-block-number: ${{ steps.fetch_block.outputs.BLOCK }}

      - name: Start Graph Node
        run: |
          docker run -d \
            --name graphnode \
            --network graphnet \
            -p 8000:8000 \
            -p 8020:8020 \
            -e POSTGRES_HOST=graphnode-postgres \
            -e POSTGRES_PORT=5432 \
            -e POSTGRES_USER=graphnode \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=graphnode-db \
            -e IPFS=ipfs:5001 \
            -e ETHEREUM=bellecour:http://blockchain-fork:8545 \
            -e GRAPH_ETHEREUM_GENESIS_BLOCK_NUMBER="${{ steps.fetch_block.outputs.BLOCK }}" \
            --health-cmd "nc -w 1 localhost 8020" \
            --health-interval 10s \
            --health-timeout 5s \
            --health-retries 5 \
            --health-start-period 30s \
            graphprotocol/graph-node:v0.37.0

      - name: Wait for services
        run: |
          # Wait for blockchain-fork to be ready
          echo "Waiting for blockchain-fork to be ready..."
          timeout 60 bash -c 'until (echo >/dev/tcp/localhost/8545) &>/dev/null; do sleep 2; done'
          
          # Wait for graph-node to be ready
          echo "Waiting for graph-node to be ready..."
          timeout 60 bash -c 'until curl -s http://localhost:8020/graphql > /dev/null; do sleep 2; done'

      - name: Build and run subgraph deployer
        run: |
          cd test-stack
          
          # Build the deployer image
          docker build -t poco-subgraph-deployer -f ./Dockerfile ..
          
          # Run the deployer container
          docker run --network host \
            -e GRAPHNODE_URL=http://localhost:8020 \
            -e IPFS_URL=http://localhost:5001 \
            -e NETWORK_NAME=bellecour \
            poco-subgraph-deployer

      - name: Run integration tests
        run: npm run test:e2e
